[1/13] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D E:\Surbhi\sample_project\build\bootloader\esp-idf\esptool_py && E:\Espressif\python_env\idf5.0_py3.8_env\Scripts\python.exe E:/Espressif/frameworks/esp-idf-v5.0/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 E:/Surbhi/sample_project/build/bootloader/bootloader.bin"
Bootloader binary size 0x6710 bytes. 0x8f0 bytes (8%) free.
[2/13] No install step for 'bootloader'
[3/13] Completed 'bootloader'
[4/13] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/protocol.c.obj
[5/13] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/main.c.obj
[6/13] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/uart_handler.c.obj
E:/Surbhi/sample_project/main/uart_handler.c:5:20: warning: 'TAG' defined but not used [-Wunused-variable]
    5 | static const char *TAG = "UART";
      |                    ^~~
[7/13] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/master_slave_task.c.obj
[8/13] Linking C static library esp-idf\main\libmain.a
[9/13] Generating ld/sections.ld
[10/13] Building C object CMakeFiles/main.elf.dir/project_elf_src_esp32.c.obj
[11/13] Linking CXX executable main.elf
[12/13] Generating binary image from built executable
esptool.py v4.7.0
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated E:/Surbhi/sample_project/build/main.bin
[13/13] cmd.exe /C "cd /D E:\Surbhi\sample_project\build\esp-idf\esptool_py && E:\Espressif\python_env\idf5.0_py3.8_env\Scripts\python.exe E:/Espressif/frameworks/esp-idf-v5.0/components/partition_table/check_sizes.py --offset 0x8000 partition --type app E:/Surbhi/sample_project/build/partition_table/partition-table.bin E:/Surbhi/sample_project/build/main.bin"
main.bin binary size 0x2fd50 bytes. Smallest app partition is 0x100000 bytes. 0xd02b0 bytes (81%) free.
